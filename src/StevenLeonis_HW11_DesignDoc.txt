Steven Leonis
EECS293: Software Craftsmanship
HW11 Design Document
11/14/17

Format:
<Class>{
	<Constructors>

	<Public / Package Private Methods>
		<Pseudocode>

	<Private Data Structures>
}


This series of assignments involves the creation of a wireframe.
Thus, the "starting point" class in my design is Wireframe. 
Note: just because it is the starting point doesn't mean everything else extends it. In fact, nothing else extends it
Methods in this class can be thought of as "buttons" that one could press in a wireframe GUI in order to perform the necessary tasks

final class Wireframe{
	Wireframe()

	void placeElement(ElementType type, Location location){
		if type = ANNOTATION, stop
		create new element of type type at location
		add it to start of wireframeElements list
	}
	void deleteElement(AbstractElement element){
		Given element (found using getElementAtPoint probably)
		if element is an annotation, go to its linkedElement to delete it

		if element is locked, stop
			if element has a parentGroup
				group.removeMember(element)
		remove any annotations from the element
		remove element from wireframeElements
	}
	void bringElementToFront(Groupable element) {
		remove element from wireframeElements, place it at start of list
	}
	void bringElementForward(Groupable element){
		find index of element in wireframeElements,
		if index > 0, set element to index - 1, set replaced element to index
	}
	void sendElementToBack(Groupable element){
		emove element from wireframeElements, place it at end of list
	}
	void sendElementBackward(Groupable element){
		if index < wireframeElements.size(), set element to index + 1, set replaced element to index
	}
	void groupElements(List<Groupable> elements){
		create new Group(elements)
		remove all elements from wireframeElements
		add group to start of wireframeElements
	}
	void ungroupElementsInGroup(Group group){
		get group members from group
		add group members back to wireframeElements
		group.deleteGroup()
		remove group from wireframeElements
	}
	
	ArrayList<Groupable> wireframeElements //The ordered list of all wireframe elements (and groups!) in this wireframe
} 

Before we get into the elements of the wireframe, we need a way to specify a location on the Wireframe.
The Location class is essentially a wrapper for a Point (an x,y position, in our case on the screen)
class Location{
	Location(Point point) 		//A Point can be gotten using MouseInfo.getPointerInfo().getLocation();
	Location(int x, int y)		//In order to manually create a location

	int getX()
	int getY()

	final int x
	final int y
}

Now, we need elements that we can put in the Wireframe. We will use an abstract class "AbstractElement" to represent anything we can put on the Wireframe. 
The purpose of this class is so that both "Annotation" and "AbstractWireframeElement" can inherit the same creation/movement/resizing code. However, because an Annotation doesn't share any other similar features with the other wireframe elements, we split them up.

abstract class AbstractElement{
	AbstractElement(Location location)

	void moveTo(Location location)
	void moveUsingOffset(int xOffset, int yOffset)
	void resizeTo(int pixelWidth, int pixelHeight)
	Location getCurrentLocation()
	int getPixelWidth()
	int getPixelHeight()
	ElementType getType()
	
	Location topLeftLocation 	//location of the top-left corner of the element
	int pixelWidth 				
	int pixelHeight	
	ElementType type			
}


We have another abstract class that represents all of the wireframe elements (except annotations!), in order to allow them to share functionality such as locking, adding annotations, and grouping

abstract class AbstractWireframeElement extends AbstractElement implements Groupable{
	AbstractWireframeElement(Location location)

	void moveTo(){ //Extended
		if locked, stop

		find the x difference between current location and new location
		find the y difference between current location and new location
		if part of a group, 
			parentGroup.moveGroupTo(xOffset, yOffset)

		else move to new location
			update annotations to new location using offset		
	}

	void moveUsingOffset(int xOffset, int yOffset){
		if locked, stop

		xLocation <- location.getX() + xOffset
		yLocation <- location.getY() + yOffset
		moveAnnotations(xOffset, yOffset)
		super.moveTo(new Location(xLocation, yLocation))
	}
	void resizeTo(int pixelWidth, int pixelHeight)
	void lock()
	void unlock()
	void createAnnotation() //creates a new blank annotation at element's location
	void removeAnnotation(Annotation annotation)
	void displayAnnotations()
	void hideAnnotations()
	void alignAnnotations(Alignment alignment)
	void setParentGroup(Group group)
	boolean isLocked()
	Optional<Group> getParentGroup()

	boolean locked
	ArrayList<Annotation> annotations
	Optional<Group> parentGroup
}

An Alignment is simply an Enum representing the 4 possible alignments: LEFT, RIGHT, CENTER, and JUSTIFIED. This is found in the Enums class

The other class that inherits from AbstractElement is Annotation. An annotation is linked to a wireframe element, but can be moved, resized, and shown/hidden independently (although the linked element has the ability to control this as well.)

class Annotation extends AbstractElement{
	Annotation(AbstractWireframeElement linkedElement, Location location)

	void display()
	void hide()
	void setText(String text)
	void setAlignment(Alignment alignment)
	String getText()
	void setLinkedElement()
	AbstractWireframeElement getLinkedElement()
	Alignment getAlignment()

	boolean hidden
	AbstractWireframeElement linkedElement
	String text 
	Alignment alignment
}

The Groupable Interface is used to specify that both Groups and AbstractWireframeElements are able to be locked and be in groups.

interface Groupable{
	public void lock();
	public void unlock();
	public boolean isLocked();
	public void setParentGroup(Group parentGroup) throws LockedException
	public Optional<Group> getParentGroup();
}

The way in which elements will be groupe together is by using a "Group" class to link them all together. The elements that can be grouped together are those that implement the "Groupable" interface
Groups have an order, determined by the order of the ArrayList. Groups need to move together, such that when one member moves, the other members also move identically

class Group implements Groupable{
	Group(List<Groupable> groupMembers)

	void addGroupMembers(List<Groupable> groupMembers){
		check if group is locked
		check if group members are locked
		for each member in groupMembers,
			set member.ParentGroup to this
			add this member to this.groupMembers
	}
	void removeGroupMembers(List<Groupable> groupMembers){
		check if group is locked
		check if group members are locked
		for each member in groupMembers,
			set member.ParentGroup to null
			remove this member from this.groupMembers
	}
	void moveGroup(int xOffset, int yOffset){
		check if group is locked
		check if group members are locked
		for each member of group
			if it is a group, do group.moveGroup(xOffset, yOffset)

			if not,
			move member using moveUsingOffset(xOffset, yOffset)
	}
	void deleteGroup(){
		if not locked
		setParentGroup of all members to Optional.empty
		clear groupMembers
		set own parentGroup to Optional.empty
	}
	void lock()
	void unlock()
	void bringElementToFront(Groupable element) {
		remove element from groupMembers, place it at start of list
	}
	void bringElementForward(Groupable element){
		find index of element in groupMembers,
		if index > 0, set element to index - 1, set replaced element to index
	}
	void sendElementToBack(Groupable element){
		emove element from groupMembers, place it at end of list
	}
	void sendElementBackward(Groupable element){
		if index < groupMembers.size(), set element to index + 1, set replaced element to index
	}
	void setParentGroup(Group group)
	boolean isLocked()
	Optional<Group> getParentGroup()
	ArrayList<Groupable> getGroupMembers()

	boolean locked
	ArrayList<Groupable> groupMembers
	Optional<Group> parentGroup
}

Finally, we can talk about the types of wireframe elements that can be created. These will all extend AbstractWireframeElement. Most of their functionality was already covered by AbstractWireframeElement, so most of these have little implementation needed.

class Image extends AbstractWireframeElement{
	ImageElement(Location location)

	void setImage(BufferedImage image)
	BufferedImage getImage()

	BufferedImage image;
}

class RoundedBox extends AbstractWireframeElement{
	RoundedBox(Location location)
}

class Text extends AbstractWireframeElement{
	Text(Location location)

	void alignText(Alignment alignment)
	String getText()
	Alignment getAlignment()

	final String text = "Lorem ipsum dolor sit...."
	Alignment alignment
}

Paragraph, Header, and List are all blocked out when drawn by the wireframe GUI. So, they do not need any special text implementation compared to Text

class Paragraph extends AbstractWireframeElement{
	Paragraph(Location location)

	void alignText(Alignment alignment)
	Alignment getAlignment()

	Alignment alignment
}

class Header extends AbstractWireframeElement{
	Header(Location location)

	void alignText(Alignment alignment)
	Alignment getAlignment()

	Alignment alignment
}

class List extends AbstractWireframeElement{
	Header(Location location)

	void alignText(Alignment alignment)
	Alignment getAlignment()

	Alignment alignment
}

class ComboBox extends AbstractWireframeElement{
	ComboBox(Location location)

	void addOption(String option)
	void removeOption(String option)
	ArrayList<String> getOptions()

	ArrayList<String> options
}

class ProgressBar extends AbstractWireframeElement{
	ProgressBar(Location location)

	void setProgress(int progress)
	int getProgress()

	int progress 		//0 to 100
}

class ScrollBar extends AbstractWireframeElement{
	ScrollBar(Location location)

	void setProgress(int progress)
	int getProgress()

	int progress 		//0 to 100
}

class Slider extends AbstractWireframeElement{
	Slider(Location location)

	void setProgress(int progress)
	int getProgress()

	int progress 		//0 to 100
}

An Enums class holds the enums used by the classes: Alignment and ElementType

public class Enums{
	Alignment:
		LEFT,
		RIGHT,
		CENTER,
		JUSTIFIED

	ElementType:
		ANNOTATION,
		IMAGE,
		ROUNDED_BOX,
		TEXT,
		PARAGRAPH,
		HEADER,
		LIST,
		COMBO_BOX,
		PROGRESS_BAR,
		SCROLL_BAR,
		SLIDER
}

A package-standard WireframeException exception class will be used to consistently throw errors if one arises
class WireframeException extends Exception{
	WireframeException(String message, Throwable e)
	WireframeException(String message)
}

A LockedException is used to tell the GUI (or whatever is using Wireframe package) that a modification was attempted on a locked object

class LockedException extends WireframeException{
	LockedException(String message)
}

